import { NextRequest, NextResponse } from 'next/server';
import { jwtVerify } from 'jose';
import { cookies } from 'next/headers';
import { v2 as cloudinary } from 'cloudinary';
import { fileStorage } from '@/lib/file-storage';

const JWT_SECRET = new TextEncoder().encode(process.env.JWT_SECRET || 'secret');
const MAX_FILE_SIZE = 50 * 1024 * 1024; // 50MB
const ENVIRONMENT = process.env.NODE_ENV || 'development';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Cloudinary –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ CLOUDINARY_URL
if (process.env.CLOUDINARY_CLOUD_NAME || process.env.CLOUDINARY_URL) {
  try {
    if (process.env.CLOUDINARY_URL) {
      // –§–æ—Ä–º–∞—Ç: cloudinary://api_key:api_secret@cloud_name
      cloudinary.config({
        secure: true,
        url: process.env.CLOUDINARY_URL
      });
      console.log('‚úÖ Cloudinary configured via CLOUDINARY_URL');
    } else if (process.env.CLOUDINARY_CLOUD_NAME && process.env.CLOUDINARY_API_KEY && process.env.CLOUDINARY_API_SECRET) {
      // –§–æ—Ä–º–∞—Ç: –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      cloudinary.config({
        cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
        api_key: process.env.CLOUDINARY_API_KEY,
        api_secret: process.env.CLOUDINARY_API_SECRET,
        secure: true
      });
      console.log('‚úÖ Cloudinary configured via separate environment variables');
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è Cloudinary configuration error:', error);
  }
}

export async function POST(req: NextRequest) {
  try {
    const cookieStore = await cookies();
    const token = cookieStore.get('token')?.value;

    if (!token) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const verified = await jwtVerify(token, JWT_SECRET);

    const formData = await req.formData();
    const file = formData.get('file') as File;

    if (!file) {
      return NextResponse.json({ error: 'No file provided' }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if (file.size > MAX_FILE_SIZE) {
      return NextResponse.json(
        { error: 'File size exceeds 50MB limit' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    const allowedTypes = [
      'application/pdf',
      'application/msword',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'application/vnd.ms-excel',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      'text/plain'
    ];

    if (!allowedTypes.includes(file.type)) {
      return NextResponse.json(
        { error: 'Invalid file type. Allowed: PDF, DOC, DOCX, XLS, XLSX, TXT' },
        { status: 400 }
      );
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ñ–∞–π–ª–∞
    const fileId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    const filename = file.name;
    
    let publicUrl = '';
    let uploadSuccess = false;

    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ Cloudinary –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
    if (process.env.CLOUDINARY_CLOUD_NAME && process.env.CLOUDINARY_API_KEY && process.env.CLOUDINARY_API_SECRET) {
      try {
        const bytes = await file.arrayBuffer();
        const buffer = Buffer.from(bytes);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Cloudinary
        const result = await new Promise((resolve, reject) => {
          const uploadStream = cloudinary.uploader.upload_stream(
            {
              resource_type: 'auto',
              public_id: `documents/${fileId}`,
              folder: 'myunion/documents',
              access_control: [{ access_type: 'token' }]
            },
            (error, result) => {
              if (error) reject(error);
              else resolve(result);
            }
          );

          uploadStream.end(buffer);
        });

        const uploadResult = result as { secure_url: string };
        publicUrl = uploadResult.secure_url;
        uploadSuccess = true;

        console.log('‚òÅÔ∏è [CLOUDINARY] File uploaded:', publicUrl);
      } catch (error) {
        console.warn('‚ö†Ô∏è Cloudinary upload failed, falling back to local storage:', error);
      }
    }

    // –ï—Å–ª–∏ Cloudinary –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º local storage (development –∏–ª–∏ fallback)
    if (!uploadSuccess) {
      if (ENVIRONMENT === 'production') {
        console.warn('‚ö†Ô∏è [PRODUCTION] Cloudinary not configured, using in-memory storage (temporary)');
      }

      try {
        if (ENVIRONMENT === 'production') {
          // –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º in-memory storage (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
          const bytes = await file.arrayBuffer();
          const buffer = Buffer.from(bytes);
          
          fileStorage.set(fileId, {
            data: buffer,
            filename: filename,
            type: file.type,
            size: file.size
          });

          publicUrl = `/api/document-file/${fileId}`;
          console.log('üìÅ [MEMORY] File stored in memory:', publicUrl);
        } else {
          // –í development —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫
          const { writeFile, mkdir } = await import('fs/promises');
          const { join } = await import('path');

          const UPLOAD_DIR = join(process.cwd(), 'public', 'uploads', 'documents');

          try {
            await mkdir(UPLOAD_DIR, { recursive: true });
          } catch (error) {
            // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–∂–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
          }

          const filepath = join(UPLOAD_DIR, fileId);
          const bytes = await file.arrayBuffer();
          const buffer = Buffer.from(bytes);
          await writeFile(filepath, buffer);

          publicUrl = `/uploads/documents/${fileId}`;
          console.log('‚úÖ [LOCAL] File uploaded:', publicUrl);
        }
      } catch (error) {
        console.error('File storage error:', error);
        return NextResponse.json(
          { error: 'File upload failed' },
          { status: 500 }
        );
      }
    }

    return NextResponse.json({
      success: true,
      filePath: publicUrl,
      filename: file.name,
      size: file.size,
      fileId: fileId,
      storage: uploadSuccess ? 'cloudinary' : (ENVIRONMENT === 'production' ? 'memory' : 'local')
    });
  } catch (error) {
    console.error('Upload error:', error);
    return NextResponse.json(
      { error: 'File upload failed' },
      { status: 500 }
    );
  }
}
