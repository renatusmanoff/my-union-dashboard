// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Пользователи системы
model User {
  id              String   @id @default(cuid())
  email           String   @unique
  password        String
  firstName       String
  lastName        String
  middleName      String?
  phone           String
  role            UserRole @default(PRIMARY_MEMBER)
  avatar          String?
  isActive        Boolean  @default(true)
  emailVerified   Boolean  @default(false)
  membershipValidated Boolean @default(false)
  lastLoginAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Связи
  organizationId  String?
  organization    Organization? @relation(fields: [organizationId], references: [id])
  
  // Созданные новости
  createdNews     News[]
  
  // Созданные задачи
  createdTasks    Task[] @relation("TaskCreator")
  assignedTasks   Task[] @relation("TaskAssignee")
  
  // Созданные документы
  createdDocuments Document[]
  
  // Отправленные сообщения
  sentMessages    Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageRecipient")
  
  // Созданные проекты
  createdProjects Project[]
  
  // Заявления на вступление в профсоюз
  membershipApplications MembershipApplication[]
  
  // Созданные события календаря
  createdEvents   CalendarEvent[]
  
  // Созданные статьи базы знаний
  createdKnowledge KnowledgeBaseItem[]
  
  // Созданные отчеты
  createdReports  Report[]

  @@map("users")
}

// Организации
model Organization {
  id            String   @id @default(cuid())
  name          String
  type          OrganizationType
  industry      UnionIndustry
  parentId      String?
  parent        Organization? @relation("OrganizationHierarchy", fields: [parentId], references: [id])
  children      Organization[] @relation("OrganizationHierarchy")
  address       String
  phone         String
  email         String   @unique
  chairmanName  String?
  chairmanId    String?
  inn           String?
  membersCount  Int      @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Связи
  users         User[]
  membershipApplications MembershipApplication[]
  news          News[]
  tasks         Task[]
  documents     Document[]
  messages      Message[]
  projects      Project[]
  events        CalendarEvent[]
  knowledge     KnowledgeBaseItem[]
  employees     Employee[]
  members       UnionMember[]
  reports       Report[]

  @@map("organizations")
}

// Заявления на вступление в профсоюз
model MembershipApplication {
  id              String   @id @default(cuid())
  
  // Личные данные
  firstName       String
  lastName        String
  middleName      String?
  dateOfBirth     DateTime
  gender          Gender
  phone           String
  address         String   // JSON строка с адресом
  
  // Данные заявления
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])
  status          ApplicationStatus @default(PENDING)
  signLater       Boolean @default(false)
  reviewedBy      String?
  reviewedAt      DateTime?
  rejectionReason String?
  
  // Связь с пользователем (может быть null для незарегистрированных)
  userId          String?
  user            User? @relation(fields: [userId], references: [id])
  
  // Документы заявления
  documents       MembershipDocument[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("membership_applications")
}

model MembershipDocument {
  id              String   @id @default(cuid())
  applicationId   String
  application     MembershipApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  type            MembershipDocumentType
  fileName        String
  filePath        String
  status          DocumentSignatureStatus @default(NOT_SIGNED)
  signedAt        DateTime?
  sentToUnion     Boolean @default(false)
  sentAt          DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("membership_documents")
}

// Новости
model News {
  id              String   @id @default(cuid())
  title           String
  content         String
  excerpt         String
  imageUrl        String?
  isPublished     Boolean  @default(false)
  publishedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Связи
  authorId        String
  author          User @relation(fields: [authorId], references: [id])
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])

  @@map("news")
}

// Задачи
model Task {
  id              String     @id @default(cuid())
  title           String
  description     String
  status          TaskStatus @default(PENDING)
  priority        TaskPriority @default(MEDIUM)
  dueDate         DateTime?
  completedAt     DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Связи
  creatorId       String
  creator         User @relation("TaskCreator", fields: [creatorId], references: [id])
  assigneeId      String?
  assignee        User? @relation("TaskAssignee", fields: [assigneeId], references: [id])
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])

  @@map("tasks")
}

// Документы
model Document {
  id              String         @id @default(cuid())
  title           String
  type            DocumentType
  status          DocumentStatus @default(DRAFT)
  fileUrl         String
  fileName        String
  fileSize        Int
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Связи
  authorId        String
  author          User @relation(fields: [authorId], references: [id])
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])

  @@map("documents")
}

// Сообщения
model Message {
  id              String   @id @default(cuid())
  subject         String
  content         String
  isRead          Boolean  @default(false)
  readAt          DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Связи
  senderId        String
  sender          User @relation("MessageSender", fields: [senderId], references: [id])
  recipientId     String
  recipient       User @relation("MessageRecipient", fields: [recipientId], references: [id])
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])

  @@map("messages")
}

// Проекты
model Project {
  id              String        @id @default(cuid())
  name            String
  description     String
  status          ProjectStatus @default(PLANNING)
  startDate       DateTime
  endDate         DateTime?
  budget          Float?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Связи
  managerId       String
  manager         User @relation(fields: [managerId], references: [id])
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])

  @@map("projects")
}

// События календаря
model CalendarEvent {
  id              String      @id @default(cuid())
  title           String
  description     String?
  startDate       DateTime
  endDate         DateTime
  type            EventType
  attendees       String[]    // Массив ID пользователей
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Связи
  creatorId       String
  creator         User @relation(fields: [creatorId], references: [id])
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])

  @@map("calendar_events")
}

// База знаний
model KnowledgeBaseItem {
  id              String   @id @default(cuid())
  title           String
  content         String
  category        String
  tags            String[] // Массив тегов
  views           Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Связи
  authorId        String
  author          User @relation(fields: [authorId], references: [id])
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])

  @@map("knowledge_base")
}

// Сотрудники
model Employee {
  id              String   @id @default(cuid())
  firstName       String
  lastName        String
  middleName      String?
  position        String
  department      String
  email           String
  phone           String
  hireDate        DateTime
  salary          Float?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Связи
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])

  @@map("employees")
}

// Члены профсоюза
model UnionMember {
  id              String         @id @default(cuid())
  firstName       String
  lastName        String
  middleName      String?
  membershipNumber String        @unique
  joinDate        DateTime
  status          MemberStatus   @default(ACTIVE)
  workplace       String
  position        String
  phone           String
  email           String?
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Связи
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])

  @@map("union_members")
}

// Отчеты
model Report {
  id              String     @id @default(cuid())
  title           String
  type            ReportType
  period          String
  fileUrl         String
  fileName        String
  fileSize        Int
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Связи
  authorId        String
  author          User @relation(fields: [authorId], references: [id])
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])

  @@map("reports")
}

// Партнеры
model Partner {
  id              String   @id @default(cuid())
  name            String
  description     String
  category        String
  contactPerson   String
  email           String
  phone           String
  website         String?
  logoUrl         String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Связи
  discounts       Discount[]

  @@map("partners")
}

// Скидки и льготы
model Discount {
  id              String   @id @default(cuid())
  title           String
  description     String
  discountPercent Int
  category        String
  validFrom       DateTime
  validTo         DateTime
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Связи
  partnerId       String
  partner         Partner @relation(fields: [partnerId], references: [id])

  @@map("discounts")
}

// Enums
enum UserRole {
  // Супер администратор
  SUPER_ADMIN
  
  // Федеральный уровень
  FEDERAL_CHAIRMAN                    // 1.1. Председатель
  FEDERAL_VICE_CHAIRMAN               // 1.2. Заместитель председателя
  FEDERAL_CHIEF_ACCOUNTANT           // 1.3. Главный бухгалтер
  FEDERAL_ACCOUNTANT                 // 1.4. Бухгалтер
  FEDERAL_DEPARTMENT_HEAD            // 1.5. Начальник управления
  FEDERAL_OFFICE_HEAD                // 1.6. Начальник отдела
  FEDERAL_SPECIALIST                 // 1.7. Специалист
  FEDERAL_PRESIDIUM_MEMBER           // 1.8. Член Президиума ЦК Профсоюза
  FEDERAL_PLENUM_MEMBER              // 1.9. Член Пленума ЦК Профсоюза
  FEDERAL_YOUTH_CHAIRMAN             // 1.10. Председатель Молодежного совета
  FEDERAL_YOUTH_VICE_CHAIRMAN        // 1.11. Заместитель председателя Молодежного совета
  FEDERAL_YOUTH_MEMBER               // 1.12. Член Молодежного совета
  FEDERAL_AUDIT_CHAIRMAN             // 1.13. Председатель КРК
  FEDERAL_AUDIT_MEMBER               // 1.14. Член КРК
  
  // Региональный уровень
  REGIONAL_CHAIRMAN                  // 2.1. Председатель
  REGIONAL_VICE_CHAIRMAN             // 2.2. Заместитель председателя
  REGIONAL_CHIEF_ACCOUNTANT         // 2.3. Главный Бухгалтер
  REGIONAL_PRESIDIUM_MEMBER          // 2.4. Член Президиума областного комитета
  REGIONAL_COMMITTEE_MEMBER          // 2.5. Член областного комитета
  REGIONAL_ACCOUNTANT                // 2.6. Бухгалтер
  REGIONAL_DEPARTMENT_HEAD           // 2.7. Заведующий отделом
  REGIONAL_CHIEF_SPECIALIST          // 2.8. Главный специалист
  REGIONAL_SPECIALIST                // 2.9. Специалист
  REGIONAL_YOUTH_CHAIRMAN            // 2.10. Председатель Молодежного совета
  REGIONAL_YOUTH_VICE_CHAIRMAN       // 2.11. Заместитель председателя Молодежного совета
  REGIONAL_YOUTH_MEMBER              // 2.12. Член Молодежного совета
  REGIONAL_AUDIT_CHAIRMAN            // 2.13. Председатель КРК
  REGIONAL_AUDIT_MEMBER              // 2.14. Член КРК
  
  // Местный уровень
  LOCAL_CHAIRMAN                     // 3.1. Председатель
  LOCAL_VICE_CHAIRMAN                // 3.2. Заместитель председателя
  LOCAL_PRESIDIUM_MEMBER             // 3.3. Член Президиума местной организации
  LOCAL_PLENUM_MEMBER                // 3.4. Член Пленума местной организации
  LOCAL_ACCOUNTANT                   // 3.5. Бухгалтер
  LOCAL_SPECIALIST                   // 3.6. Специалист
  LOCAL_AUDIT_CHAIRMAN               // 3.7. Председатель КРК
  LOCAL_AUDIT_MEMBER                 // 3.8. Член КРК
  LOCAL_YOUTH_CHAIRMAN               // 3.9. Председатель Молодежного совета
  LOCAL_YOUTH_VICE_CHAIRMAN          // 3.10. Заместитель председателя Молодежного совета
  LOCAL_YOUTH_MEMBER                 // 3.11. Член Молодежного совета
  
  // Первичная профсоюзная организация
  PRIMARY_CHAIRMAN                   // 4.1. Председатель
  PRIMARY_VICE_CHAIRMAN              // 4.2. Заместитель председателя
  PRIMARY_ACCOUNTANT                 // 4.3. Бухгалтер (казначей)
  PRIMARY_COMMITTEE_MEMBER           // 4.4. Член Профкома
  PRIMARY_AUDIT_CHAIRMAN             // 4.5. Председатель КРК
  PRIMARY_AUDIT_MEMBER               // 4.6. Член КРК
  PRIMARY_YOUTH_CHAIRMAN             // 4.7. Председатель Молодежного совета
  PRIMARY_YOUTH_VICE_CHAIRMAN        // 4.8. Заместитель председателя Молодежного совета
  PRIMARY_YOUTH_MEMBER               // 4.9. Член Молодежного совета
  PRIMARY_MEMBER                     // 4.10. Член Профсоюза
  
  // Структурные подразделения ППО
  PROF_BUREAU_CHAIRMAN               // 4.a.1. Председатель ПрофБюро
  PROF_BUREAU_VICE_CHAIRMAN          // 4.a.2. Заместитель председателя ПрофБюро
  PROF_BUREAU_MEMBER                 // 4.a.3. Член ПрофБюро
  PROF_GROUP_ORGANIZER               // 4.b.1. Профгруппорг
  PROF_GROUP_VICE_ORGANIZER         // 4.b.2. Заместитель профгрупорга
  PROF_GROUP_MEMBER                 // 4.b.3. Член профгруппы
}

enum OrganizationType {
  FEDERAL
  REGIONAL
  LOCAL
  PRIMARY
}

enum UnionIndustry {
  EDUCATION
  HEALTHCARE
  OIL_GAS
  METALLURGY
  TRANSPORT
  CONSTRUCTION
  COMMUNICATIONS
  ENERGY
  AGRICULTURE
  TRADE
  CULTURE
  SPORT
  DEFENSE
  CHEMICAL
  TEXTILE
  FOOD
  FORESTRY
  MINING
  MACHINE_BUILDING
  FINANCE
  PUBLIC_SERVICE
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Gender {
  MALE
  FEMALE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DocumentType {
  INTERNAL
  EXTERNAL
  REGULATORY
}

enum DocumentStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
}

enum MembershipDocumentType {
  MEMBERSHIP_APPLICATION    // Заявление на вступление в профсоюз
  CONSENT_PERSONAL_DATA     // Согласие на обработку персональных данных
  PAYMENT_DEDUCTION         // Заявление на удержание взносов
}

enum DocumentSignatureStatus {
  NOT_SIGNED    // Не подписано
  SIGNED        // Подписано
  REJECTED      // Отклонено
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum EventType {
  MEETING
  EVENT
  DEADLINE
  HOLIDAY
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ReportType {
  FINANCIAL
  MEMBERSHIP
  ACTIVITY
  STATISTICAL
}
