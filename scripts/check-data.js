const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkData() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ...\n');

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userCount = await prisma.user.count();
    console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`);

    const primaryMembers = await prisma.user.count({
      where: { role: 'PRIMARY_MEMBER' }
    });
    console.log(`üë§ –ß–ª–µ–Ω–æ–≤ –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ (PRIMARY_MEMBER): ${primaryMembers}`);

    const superAdmins = await prisma.user.count({
      where: { role: 'SUPER_ADMIN' }
    });
    console.log(`üîë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${superAdmins}`);

    const chairmen = await prisma.user.count({
      where: { role: 'PRIMARY_CHAIRMAN' }
    });
    console.log(`üë®‚Äçüíº –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª–µ–π: ${chairmen}`);

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    const orgCount = await prisma.organization.count();
    console.log(`üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: ${orgCount}`);

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–ª–µ–Ω–∏—è
    const appCount = await prisma.membershipApplication.count();
    console.log(`üìù –ó–∞—è–≤–ª–µ–Ω–∏–π –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: ${appCount}`);

    const approvedApps = await prisma.membershipApplication.count({
      where: { status: 'APPROVED' }
    });
    console.log(`‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–ª–µ–Ω–∏–π: ${approvedApps}`);

    const pendingApps = await prisma.membershipApplication.count({
      where: { status: 'PENDING' }
    });
    console.log(`‚è≥ –ó–∞—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: ${pendingApps}`);

    const rejectedApps = await prisma.membershipApplication.count({
      where: { status: 'REJECTED' }
    });
    console.log(`‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–ª–µ–Ω–∏–π: ${rejectedApps}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–ª–µ–Ω–æ–≤ –ø—Ä–æ—Ñ—Å–æ—é–∑–∞
    console.log('\nüìã –°–ø–∏—Å–æ–∫ —á–ª–µ–Ω–æ–≤ –ø—Ä–æ—Ñ—Å–æ—é–∑–∞:');
    const members = await prisma.user.findMany({
      where: { role: 'PRIMARY_MEMBER' },
      include: {
        organization: {
          select: { name: true }
        },
        membershipApplications: {
          select: { status: true, createdAt: true },
          orderBy: { createdAt: 'desc' },
          take: 1
        }
      }
    });

    members.forEach((member, index) => {
      const latestApp = member.membershipApplications[0];
      const status = latestApp ? latestApp.status : '–ù–µ—Ç –∑–∞—è–≤–ª–µ–Ω–∏—è';
      console.log(`${index + 1}. ${member.lastName} ${member.firstName} ${member.middleName || ''} (${member.email}) - ${status}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkData();
