import { prisma } from '@/lib/database';
import { WorkflowDocumentType, WorkflowDocumentStatus, DocumentParticipantStatus } from '@prisma/client';

async function createTestWorkflowDocuments() {
  console.log('üîÑ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const organization = await prisma.organization.findFirst({
      where: { name: '–ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ—Ñ—Å–æ—é–∑–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ú–ì–£' }
    });

    if (!organization) {
      console.log('‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    const chairman = await prisma.user.findFirst({
      where: {
        organizationId: organization.id,
        role: 'PRIMARY_CHAIRMAN'
      }
    });

    if (!chairman) {
      console.log('‚ùå –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–ª–µ–Ω–æ–≤ –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
    const members = await prisma.user.findMany({
      where: {
        organizationId: organization.id,
        role: 'PRIMARY_MEMBER'
      },
      take: 3
    });

    if (members.length === 0) {
      console.log('‚ùå –ß–ª–µ–Ω—ã –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const documents = [
      {
        title: '–ü—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∫–æ–º–∞ –æ—Ç 15.10.2025',
        type: 'PROTOCOL_MEETING' as WorkflowDocumentType,
        content: '<h1>–ü—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è</h1><p>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞...</p>',
        status: 'PENDING_APPROVAL' as WorkflowDocumentStatus
      },
      {
        title: '–ü–æ–≤–µ—Å—Ç–∫–∞ –¥–Ω—è –Ω–∞ –æ–∫—Ç—è–±—Ä—å 2025',
        type: 'AGENDA' as WorkflowDocumentType,
        content: '<h1>–ü–æ–≤–µ—Å—Ç–∫–∞ –¥–Ω—è</h1><p>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è...</p>',
        status: 'DRAFT' as WorkflowDocumentStatus
      },
      {
        title: '–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–º–µ—Ä–µ —á–ª–µ–Ω—Å–∫–∏—Ö –≤–∑–Ω–æ—Å–æ–≤',
        type: 'RESOLUTION' as WorkflowDocumentType,
        content: '<h1>–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ</h1><p>–û —Ä–∞–∑–º–µ—Ä–µ —á–ª–µ–Ω—Å–∫–∏—Ö –≤–∑–Ω–æ—Å–æ–≤ –Ω–∞ 2026 –≥–æ–¥...</p>',
        status: 'APPROVED' as WorkflowDocumentStatus
      }
    ];

    for (const docData of documents) {
      // –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
      const document = await prisma.workflowDocument.create({
        data: {
          title: docData.title,
          type: docData.type,
          content: docData.content,
          status: docData.status,
          creatorId: chairman.id,
          organizationId: organization.id
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      const participantData = members.map(member => ({
        userId: member.id,
        documentId: document.id,
        status: docData.status === 'APPROVED' ? 'SIGNED' as DocumentParticipantStatus : 'PENDING' as DocumentParticipantStatus
      }));

      await prisma.documentParticipant.createMany({
        data: participantData
      });

      // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∏
      if (docData.status === 'APPROVED') {
        const signatureData = members.map(member => ({
          userId: member.id,
          documentId: document.id,
          signedAt: new Date()
        }));

        await prisma.documentSignature.createMany({
          data: signatureData
        });
      }

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç: ${docData.title}`);
    }

    console.log('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
createTestWorkflowDocuments()
  .then(() => {
    console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
