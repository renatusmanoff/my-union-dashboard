#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const { PrismaClient } = require('@prisma/client');

async function cleanupDatabase() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  const prisma = new PrismaClient();
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const allUsers = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        firstName: true,
        lastName: true,
        role: true
      }
    });
    
    console.log('üìã –¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
    allUsers.forEach(user => {
      console.log(`  - ${user.email} (${user.firstName} ${user.lastName}) - ${user.role}`);
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤—Å–µ –∫—Ä–æ–º–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    const usersToDelete = allUsers.filter(user => user.email !== 'support@myunion.pro');
    
    if (usersToDelete.length === 0) {
      console.log('‚úÖ –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      return;
    }
    
    console.log(`\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º ${usersToDelete.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
    
    for (const user of usersToDelete) {
      console.log(`  - –£–¥–∞–ª—è–µ–º: ${user.email} (${user.firstName} ${user.lastName})`);
      
      // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await prisma.membershipApplication.deleteMany({
        where: { userId: user.id }
      });
      
      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.user.delete({
        where: { id: user.id }
      });
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–∫—Ä–æ–º–µ —Ç–µ—Ö, —á—Ç–æ –Ω—É–∂–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã)
    console.log('\nüè¢ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π...');
    const organizations = await prisma.organization.findMany();
    console.log(`üìã –¢–µ–∫—É—â–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ${organizations.length}`);
    
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    // –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    console.log('\nüì∞ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...');
    const newsCount = await prisma.news.count();
    if (newsCount > 0) {
      await prisma.news.deleteMany({});
      console.log(`  - –£–¥–∞–ª–µ–Ω–æ ${newsCount} –Ω–æ–≤–æ—Å—Ç–µ–π`);
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–∞ —á–ª–µ–Ω—Å—Ç–≤–æ
    console.log('\nüìù –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–ª–µ–Ω–∏–π –Ω–∞ —á–ª–µ–Ω—Å—Ç–≤–æ...');
    const applicationsCount = await prisma.membershipApplication.count();
    if (applicationsCount > 0) {
      await prisma.membershipApplication.deleteMany({});
      console.log(`  - –£–¥–∞–ª–µ–Ω–æ ${applicationsCount} –∑–∞—è–≤–ª–µ–Ω–∏–π`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const remainingUsers = await prisma.user.findMany({
      select: {
        email: true,
        firstName: true,
        lastName: true,
        role: true
      }
    });
    
    console.log('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üìã –û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
    remainingUsers.forEach(user => {
      console.log(`  - ${user.email} (${user.firstName} ${user.lastName}) - ${user.role}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

cleanupDatabase();
