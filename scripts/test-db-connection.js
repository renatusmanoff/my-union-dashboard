#!/usr/bin/env node

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const { PrismaClient } = require('@prisma/client');

async function testConnection() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  const prisma = new PrismaClient({
    datasources: {
      db: {
        url: process.env.DATABASE_URL || "postgresql://gen_user:%3C!zq%3F)gO4K8lvh@194.31.173.95:5432/postgres?schema=public&sslmode=require"
      }
    }
  });
  
  try {
    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const result = await prisma.$queryRaw`SELECT 1 as test`;
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!', result);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const userCount = await prisma.user.count();
    console.log('üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', userCount);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const superAdmin = await prisma.user.findUnique({
      where: { email: 'support@myunion.pro' },
      select: { email: true, firstName: true, lastName: true, role: true }
    });
    console.log('üîë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:', superAdmin);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testConnection();
