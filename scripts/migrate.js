const { PrismaClient } = require('@prisma/client');
const { execSync } = require('child_process');

const prisma = new PrismaClient();

async function safeMigration() {
  try {
    console.log('üîÑ Starting safe database migration...');
    
    // 1. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
    console.log('üì¶ Creating data backup...');
    const backup = await createDataBackup();
    
    // 2. –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –±–µ–∑ —Å–±—Ä–æ—Å–∞
    console.log('üîß Attempting non-destructive migration...');
    try {
      execSync('npx prisma db push', { stdio: 'inherit' });
      console.log('‚úÖ Migration completed successfully without data loss!');
      return;
    } catch (error) {
      console.log('‚ö†Ô∏è Non-destructive migration failed, checking if reset is needed...');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å
    const isDevelopment = process.env.NODE_ENV === 'development' || 
                         process.env.DATABASE_URL?.includes('localhost') ||
                         process.env.DATABASE_URL?.includes('neondb');
    
    if (!isDevelopment) {
      console.error('‚ùå Cannot reset production database!');
      console.log('Please manually resolve the migration conflicts.');
      return;
    }
    
    // 4. –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–±—Ä–æ—Å–µ
    console.log('üîÑ Database reset required for migration.');
    console.log('This will delete all data and recreate the schema.');
    console.log('Data backup has been created and will be restored after migration.');
    
    // 5. –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    console.log('üóëÔ∏è Resetting database...');
    execSync('npx prisma db push --force-reset', { stdio: 'inherit' });
    
    console.log('üîÑ Restoring data from backup...');
    await restoreDataBackup(backup);
    
    console.log('‚úÖ Migration completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

async function createDataBackup() {
  const backup = {
    organizations: [],
    users: [],
    applications: [],
    documents: []
  };
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –≤—Å–µ—Ö –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    backup.organizations = await prisma.organization.findMany();
    backup.users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        firstName: true,
        lastName: true,
        middleName: true,
        phone: true,
        role: true,
        organizationId: true,
        isActive: true,
        emailVerified: true,
        password: true
      }
    });
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –∑–∞—è–≤–ª–µ–Ω–∏–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
    try {
      backup.applications = await prisma.membershipApplication.findMany();
    } catch (error) {
      console.log('‚ö†Ô∏è MembershipApplication table not found, skipping backup');
    }
    
    try {
      backup.documents = await prisma.membershipDocument.findMany();
    } catch (error) {
      console.log('‚ö†Ô∏è MembershipDocument table not found, skipping backup');
    }
    
    console.log(`üì¶ Backup created: ${backup.organizations.length} organizations, ${backup.users.length} users`);
    return backup;
    
  } catch (error) {
    console.error('‚ùå Failed to create backup:', error);
    throw error;
  }
}

async function restoreDataBackup(backup) {
  try {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    for (const org of backup.organizations) {
      await prisma.organization.create({
        data: {
          name: org.name,
          type: org.type,
          industry: org.industry,
          address: org.address,
          phone: org.phone,
          email: org.email,
          isActive: org.isActive
        }
      });
    }
    console.log(`‚úÖ Restored ${backup.organizations.length} organizations`);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const user of backup.users) {
      await prisma.user.create({
        data: {
          email: user.email,
          firstName: user.firstName,
          lastName: user.lastName,
          middleName: user.middleName,
          phone: user.phone,
          role: user.role,
          organizationId: user.organizationId,
          isActive: user.isActive,
          emailVerified: user.emailVerified,
          password: user.password
        }
      });
    }
    console.log(`‚úÖ Restored ${backup.users.length} users`);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—è–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (backup.applications.length > 0) {
      for (const app of backup.applications) {
        await prisma.membershipApplication.create({
          data: {
            firstName: app.firstName,
            lastName: app.lastName,
            middleName: app.middleName,
            dateOfBirth: app.dateOfBirth,
            gender: app.gender,
            phone: app.phone,
            address: app.address,
            organizationId: app.organizationId,
            status: app.status,
            signLater: app.signLater,
            userId: app.userId
          }
        });
      }
      console.log(`‚úÖ Restored ${backup.applications.length} applications`);
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (backup.documents.length > 0) {
      for (const doc of backup.documents) {
        await prisma.membershipDocument.create({
          data: {
            applicationId: doc.applicationId,
            type: doc.type,
            fileName: doc.fileName,
            filePath: doc.filePath,
            status: doc.status,
            signedAt: doc.signedAt,
            sentToUnion: doc.sentToUnion,
            sentAt: doc.sentAt
          }
        });
      }
      console.log(`‚úÖ Restored ${backup.documents.length} documents`);
    }
    
  } catch (error) {
    console.error('‚ùå Failed to restore backup:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
safeMigration();
