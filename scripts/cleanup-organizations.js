#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
const { PrismaClient } = require('@prisma/client');

async function cleanupOrganizations() {
  console.log('üè¢ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π...');
  
  const prisma = new PrismaClient();
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    const organizations = await prisma.organization.findMany({
      select: {
        id: true,
        name: true,
        type: true,
        email: true
      }
    });
    
    console.log('üìã –¢–µ–∫—É—â–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:');
    organizations.forEach(org => {
      console.log(`  - ${org.name} (${org.type}) - ${org.email}`);
    });
    
    if (organizations.length === 0) {
      console.log('‚úÖ –ù–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      return;
    }
    
    console.log(`\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º ${organizations.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π:`);
    
    for (const org of organizations) {
      console.log(`  - –£–¥–∞–ª—è–µ–º: ${org.name}`);
      
      // –£–¥–∞–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é (—Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
      await prisma.organization.delete({
        where: { id: org.id }
      });
    }
    
    console.log('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

cleanupOrganizations();
