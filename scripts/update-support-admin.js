const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function updateSupportAdmin() {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingAdmin = await prisma.user.findUnique({
      where: { email: 'support@myunion.pro' }
    });

    if (!existingAdmin) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å support@myunion.pro –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log('üìß –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', existingAdmin.email);
    console.log('üë§ –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:', existingAdmin.role);
    console.log('‚úÖ –ê–∫—Ç–∏–≤–µ–Ω:', existingAdmin.isActive);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedAdmin = await prisma.user.update({
      where: { email: 'support@myunion.pro' },
      data: {
        role: 'SUPER_ADMIN',
        isActive: true,
        emailVerified: true,
        membershipValidated: true,
        password: await bcrypt.hash('123321ZxQ@*', 10) // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
      }
    });

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:');
    console.log('üìß Email:', updatedAdmin.email);
    console.log('üë§ –†–æ–ª—å:', updatedAdmin.role);
    console.log('‚úÖ –ê–∫—Ç–∏–≤–µ–Ω:', updatedAdmin.isActive);
    console.log('üîë –ü–∞—Ä–æ–ª—å: 123321ZxQ@*');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

updateSupportAdmin()
  .then(() => {
    console.log('üéâ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
    process.exit(1);
  });
