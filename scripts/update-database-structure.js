#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ–ª—è –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function updateDatabaseStructure() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

  try {
    // 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ enum —Ç–∏–ø—ã
    console.log('üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ enum —Ç–∏–ø—ã...');
    
    await prisma.$executeRaw`
      DO $$ BEGIN
        CREATE TYPE "WorkflowDocumentType" AS ENUM ('PROTOCOL_MEETING', 'AGENDA', 'MEETING_CONDUCT', 'RESOLUTION');
      EXCEPTION
        WHEN duplicate_object THEN null;
      END $$;
    `;

    await prisma.$executeRaw`
      DO $$ BEGIN
        CREATE TYPE "WorkflowDocumentStatus" AS ENUM ('DRAFT', 'PENDING_APPROVAL', 'APPROVED', 'REJECTED', 'COMPLETED');
      EXCEPTION
        WHEN duplicate_object THEN null;
      END $$;
    `;

    await prisma.$executeRaw`
      DO $$ BEGIN
        CREATE TYPE "DocumentParticipantStatus" AS ENUM ('PENDING', 'APPROVED', 'SIGNED', 'REJECTED');
      EXCEPTION
        WHEN duplicate_object THEN null;
      END $$;
    `;

    await prisma.$executeRaw`
      DO $$ BEGIN
        CREATE TYPE "NotificationType" AS ENUM ('NEW_MEMBER_REGISTRATION', 'MEMBERSHIP_APPROVED', 'MEMBERSHIP_REJECTED', 'DOCUMENT_CREATED', 'DOCUMENT_SIGNED', 'DOCUMENT_REJECTED', 'DOCUMENT_APPROVED');
      EXCEPTION
        WHEN duplicate_object THEN null;
      END $$;
    `;

    console.log('‚úÖ Enum —Ç–∏–ø—ã —Å–æ–∑–¥–∞–Ω—ã');

    // 2. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É workflow_documents
    console.log('üìÑ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É workflow_documents...');
    
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "workflow_documents" (
        "id" TEXT NOT NULL,
        "title" TEXT NOT NULL,
        "type" "WorkflowDocumentType" NOT NULL,
        "content" TEXT,
        "pdfPath" TEXT,
        "status" "WorkflowDocumentStatus" NOT NULL DEFAULT 'DRAFT',
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL,
        "creatorId" TEXT NOT NULL,
        "organizationId" TEXT,

        CONSTRAINT "workflow_documents_pkey" PRIMARY KEY ("id")
      );
    `;

    // 3. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É document_participants
    console.log('üë• –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É document_participants...');
    
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "document_participants" (
        "id" TEXT NOT NULL,
        "userId" TEXT NOT NULL,
        "documentId" TEXT NOT NULL,
        "status" "DocumentParticipantStatus" NOT NULL DEFAULT 'PENDING',
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL,

        CONSTRAINT "document_participants_pkey" PRIMARY KEY ("id")
      );
    `;

    // 4. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É document_signatures
    console.log('‚úçÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É document_signatures...');
    
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "document_signatures" (
        "id" TEXT NOT NULL,
        "userId" TEXT NOT NULL,
        "documentId" TEXT NOT NULL,
        "signature" TEXT,
        "signedAt" TIMESTAMP(3),
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

        CONSTRAINT "document_signatures_pkey" PRIMARY KEY ("id")
      );
    `;

    // 5. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É notifications
    console.log('üîî –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É notifications...');
    
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "notifications" (
        "id" TEXT NOT NULL,
        "type" "NotificationType" NOT NULL,
        "title" TEXT NOT NULL,
        "message" TEXT NOT NULL,
        "isRead" BOOLEAN NOT NULL DEFAULT false,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "senderId" TEXT,
        "recipientId" TEXT NOT NULL,
        "workflowDocumentId" TEXT,
        "membershipApplicationId" TEXT,

        CONSTRAINT "notifications_pkey" PRIMARY KEY ("id")
      );
    `;

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');

    // 6. –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
    console.log('üîó –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏...');

    // –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –¥–ª—è workflow_documents
    await prisma.$executeRaw`
      DO $$ BEGIN
        ALTER TABLE "workflow_documents" ADD CONSTRAINT "workflow_documents_creatorId_fkey" 
        FOREIGN KEY ("creatorId") REFERENCES "users"("id") ON DELETE RESTRICT ON UPDATE CASCADE;
      EXCEPTION
        WHEN duplicate_object THEN null;
      END $$;
    `;

    await prisma.$executeRaw`
      DO $$ BEGIN
        ALTER TABLE "workflow_documents" ADD CONSTRAINT "workflow_documents_organizationId_fkey" 
        FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE SET NULL ON UPDATE CASCADE;
      EXCEPTION
        WHEN duplicate_object THEN null;
      END $$;
    `;

    // –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –¥–ª—è document_participants
    await prisma.$executeRaw`
      DO $$ BEGIN
        ALTER TABLE "document_participants" ADD CONSTRAINT "document_participants_userId_fkey" 
        FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE RESTRICT ON UPDATE CASCADE;
      EXCEPTION
        WHEN duplicate_object THEN null;
      END $$;
    `;

    await prisma.$executeRaw`
      DO $$ BEGIN
        ALTER TABLE "document_participants" ADD CONSTRAINT "document_participants_documentId_fkey" 
        FOREIGN KEY ("documentId") REFERENCES "workflow_documents"("id") ON DELETE RESTRICT ON UPDATE CASCADE;
      EXCEPTION
        WHEN duplicate_object THEN null;
      END $$;
    `;

    // –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –¥–ª—è document_signatures
    await prisma.$executeRaw`
      DO $$ BEGIN
        ALTER TABLE "document_signatures" ADD CONSTRAINT "document_signatures_userId_fkey" 
        FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE RESTRICT ON UPDATE CASCADE;
      EXCEPTION
        WHEN duplicate_object THEN null;
      END $$;
    `;

    await prisma.$executeRaw`
      DO $$ BEGIN
        ALTER TABLE "document_signatures" ADD CONSTRAINT "document_signatures_documentId_fkey" 
        FOREIGN KEY ("documentId") REFERENCES "workflow_documents"("id") ON DELETE RESTRICT ON UPDATE CASCADE;
      EXCEPTION
        WHEN duplicate_object THEN null;
      END $$;
    `;

    // –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –¥–ª—è notifications
    await prisma.$executeRaw`
      DO $$ BEGIN
        ALTER TABLE "notifications" ADD CONSTRAINT "notifications_senderId_fkey" 
        FOREIGN KEY ("senderId") REFERENCES "users"("id") ON DELETE SET NULL ON UPDATE CASCADE;
      EXCEPTION
        WHEN duplicate_object THEN null;
      END $$;
    `;

    await prisma.$executeRaw`
      DO $$ BEGIN
        ALTER TABLE "notifications" ADD CONSTRAINT "notifications_recipientId_fkey" 
        FOREIGN KEY ("recipientId") REFERENCES "users"("id") ON DELETE RESTRICT ON UPDATE CASCADE;
      EXCEPTION
        WHEN duplicate_object THEN null;
      END $$;
    `;

    await prisma.$executeRaw`
      DO $$ BEGIN
        ALTER TABLE "notifications" ADD CONSTRAINT "notifications_workflowDocumentId_fkey" 
        FOREIGN KEY ("workflowDocumentId") REFERENCES "workflow_documents"("id") ON DELETE SET NULL ON UPDATE CASCADE;
      EXCEPTION
        WHEN duplicate_object THEN null;
      END $$;
    `;

    await prisma.$executeRaw`
      DO $$ BEGIN
        ALTER TABLE "notifications" ADD CONSTRAINT "notifications_membershipApplicationId_fkey" 
        FOREIGN KEY ("membershipApplicationId") REFERENCES "membership_applications"("id") ON DELETE SET NULL ON UPDATE CASCADE;
      EXCEPTION
        WHEN duplicate_object THEN null;
      END $$;
    `;

    console.log('‚úÖ –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');

    // 7. –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    console.log('üîç –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã...');

    await prisma.$executeRaw`
      DO $$ BEGIN
        CREATE UNIQUE INDEX "document_participants_userId_documentId_key" ON "document_participants"("userId", "documentId");
      EXCEPTION
        WHEN duplicate_table THEN null;
      END $$;
    `;

    await prisma.$executeRaw`
      DO $$ BEGIN
        CREATE UNIQUE INDEX "document_signatures_userId_documentId_key" ON "document_signatures"("userId", "documentId");
      EXCEPTION
        WHEN duplicate_table THEN null;
      END $$;
    `;

    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');

    console.log('üéâ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
    console.log('üìä –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
    console.log('   - workflow_documents (–¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç)');
    console.log('   - document_participants (—É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)');
    console.log('   - document_signatures (–ø–æ–¥–ø–∏—Å–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)');
    console.log('   - notifications (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
updateDatabaseStructure()
  .catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
