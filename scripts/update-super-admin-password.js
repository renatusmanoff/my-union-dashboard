#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

async function updateSuperAdminPassword() {
  console.log('üîê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
  
  const prisma = new PrismaClient();
  
  try {
    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å "password"
    const hashedPassword = await bcrypt.hash('password', 10);
    console.log('üîë –•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:', hashedPassword);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const updatedUser = await prisma.user.update({
      where: { email: 'support@myunion.pro' },
      data: { password: hashedPassword },
      select: {
        email: true,
        firstName: true,
        lastName: true,
        role: true
      }
    });
    
    console.log('‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', updatedUser);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

updateSuperAdminPassword();
