const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function clearExistingData() {
  try {
    console.log('üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...');
    
    // –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–∑-–∑–∞ foreign key constraints
    await prisma.membershipDocument.deleteMany();
    await prisma.membershipApplication.deleteMany();
    await prisma.user.deleteMany();
    await prisma.organization.deleteMany();
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

async function createFakeOrganizations() {
  try {
    console.log('üè¢ –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è–º–∏ –∏ —á–ª–µ–Ω–∞–º–∏...\n');

    // 1. –§–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
    const federalOrg = await prisma.organization.create({
      data: {
        name: '–§–µ–¥–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ—Å–æ—é–∑–æ–≤ –†–æ—Å—Å–∏–∏',
        type: 'FEDERAL',
        industry: 'EDUCATION',
        address: '–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 15',
        phone: '+7 (495) 123-45-67',
        email: 'federation@profsoyuz.ru',
        chairmanName: '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á',
        membersCount: 0,
        isActive: true
      }
    });

    // –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å
    const federalChairman = await prisma.user.create({
      data: {
        email: 'federal@profsoyuz.ru',
        password: await bcrypt.hash('123456', 10),
        firstName: '–ü–µ—Ç—Ä',
        lastName: '–ü–µ—Ç—Ä–æ–≤',
        middleName: '–ü–µ—Ç—Ä–æ–≤–∏—á',
        phone: '+7 (495) 123-45-68',
        role: 'FEDERAL_CHAIRMAN',
        organizationId: federalOrg.id,
        isActive: true,
        emailVerified: true
      }
    });

    console.log('‚úÖ –§–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', federalOrg.name);
    console.log('‚úÖ –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å:', federalChairman.email);

    // 2. –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è (–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)
    const regionalOrg1 = await prisma.organization.create({
      data: {
        name: '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ—Å–æ—é–∑–æ–≤',
        type: 'REGIONAL',
        industry: 'EDUCATION',
        address: '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥. –ü–æ–¥–æ–ª—å—Å–∫, —É–ª. –õ–µ–Ω–∏–Ω–∞, 1',
        phone: '+7 (496) 123-45-67',
        email: 'moscow-region@profsoyuz.ru',
        chairmanName: '–ò–≤–∞–Ω–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞',
        membersCount: 0,
        isActive: true
      }
    });

    const regionalChairman1 = await prisma.user.create({
      data: {
        email: 'regional1@profsoyuz.ru',
        password: await bcrypt.hash('123456', 10),
        firstName: '–ê–Ω–Ω–∞',
        lastName: '–ò–≤–∞–Ω–æ–≤–∞',
        middleName: '–°–µ—Ä–≥–µ–µ–≤–Ω–∞',
        phone: '+7 (496) 123-45-68',
        role: 'REGIONAL_CHAIRMAN',
        organizationId: regionalOrg1.id,
        isActive: true,
        emailVerified: true
      }
    });

    console.log('‚úÖ –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è 1 —Å–æ–∑–¥–∞–Ω–∞:', regionalOrg1.name);
    console.log('‚úÖ –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å 1:', regionalChairman1.email);

    // 3. –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è (–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥)
    const regionalOrg2 = await prisma.organization.create({
      data: {
        name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∞—è –≥–æ—Ä–æ–¥—Å–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ—Å–æ—é–∑–æ–≤',
        type: 'REGIONAL',
        industry: 'EDUCATION',
        address: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 1',
        phone: '+7 (812) 123-45-67',
        email: 'spb@profsoyuz.ru',
        chairmanName: '–°–∏–¥–æ—Ä–æ–≤ –ú–∏—Ö–∞–∏–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á',
        membersCount: 0,
        isActive: true
      }
    });

    const regionalChairman2 = await prisma.user.create({
      data: {
        email: 'regional2@profsoyuz.ru',
        password: await bcrypt.hash('123456', 10),
        firstName: '–ú–∏—Ö–∞–∏–ª',
        lastName: '–°–∏–¥–æ—Ä–æ–≤',
        middleName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á',
        phone: '+7 (812) 123-45-68',
        role: 'REGIONAL_CHAIRMAN',
        organizationId: regionalOrg2.id,
        isActive: true,
        emailVerified: true
      }
    });

    console.log('‚úÖ –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è 2 —Å–æ–∑–¥–∞–Ω–∞:', regionalOrg2.name);
    console.log('‚úÖ –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å 2:', regionalChairman2.email);

    // 4. –ú–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è (–ü–æ–¥–æ–ª—å—Å–∫)
    const localOrg1 = await prisma.organization.create({
      data: {
        name: '–ü–æ–¥–æ–ª—å—Å–∫–∞—è –≥–æ—Ä–æ–¥—Å–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ—Å–æ—é–∑–æ–≤',
        type: 'LOCAL',
        industry: 'EDUCATION',
        address: '–ü–æ–¥–æ–ª—å—Å–∫, —É–ª. –ö–∏—Ä–æ–≤–∞, 10',
        phone: '+7 (496) 234-56-78',
        email: 'podolsk@profsoyuz.ru',
        chairmanName: '–ö–æ–∑–ª–æ–≤–∞ –ï–ª–µ–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞',
        membersCount: 0,
        isActive: true
      }
    });

    const localChairman1 = await prisma.user.create({
      data: {
        email: 'local1@profsoyuz.ru',
        password: await bcrypt.hash('123456', 10),
        firstName: '–ï–ª–µ–Ω–∞',
        lastName: '–ö–æ–∑–ª–æ–≤–∞',
        middleName: '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞',
        phone: '+7 (496) 234-56-79',
        role: 'LOCAL_CHAIRMAN',
        organizationId: localOrg1.id,
        isActive: true,
        emailVerified: true
      }
    });

    console.log('‚úÖ –ú–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è 1 —Å–æ–∑–¥–∞–Ω–∞:', localOrg1.name);
    console.log('‚úÖ –ú–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å 1:', localChairman1.email);

    // 5. –ú–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è (–ü–µ—Ç–µ—Ä–≥–æ—Ñ)
    const localOrg2 = await prisma.organization.create({
      data: {
        name: '–ü–µ—Ç–µ—Ä–≥–æ—Ñ—Å–∫–∞—è –≥–æ—Ä–æ–¥—Å–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ—Å–æ—é–∑–æ–≤',
        type: 'LOCAL',
        industry: 'EDUCATION',
        address: '–ü–µ—Ç–µ—Ä–≥–æ—Ñ, —É–ª. –†–∞–∑–≤–æ–¥–Ω–∞—è, 2',
        phone: '+7 (812) 234-56-78',
        email: 'peterhof@profsoyuz.ru',
        chairmanName: '–ú–æ—Ä–æ–∑–æ–≤ –î–º–∏—Ç—Ä–∏–π –ò–≥–æ—Ä–µ–≤–∏—á',
        membersCount: 0,
        isActive: true
      }
    });

    const localChairman2 = await prisma.user.create({
      data: {
        email: 'local2@profsoyuz.ru',
        password: await bcrypt.hash('123456', 10),
        firstName: '–î–º–∏—Ç—Ä–∏–π',
        lastName: '–ú–æ—Ä–æ–∑–æ–≤',
        middleName: '–ò–≥–æ—Ä–µ–≤–∏—á',
        phone: '+7 (812) 234-56-79',
        role: 'LOCAL_CHAIRMAN',
        organizationId: localOrg2.id,
        isActive: true,
        emailVerified: true
      }
    });

    console.log('‚úÖ –ú–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è 2 —Å–æ–∑–¥–∞–Ω–∞:', localOrg2.name);
    console.log('‚úÖ –ú–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å 2:', localChairman2.email);

    // 6. –ü–µ—Ä–≤–∏—á–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    const primaryOrgs = [
      {
        name: '–ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ—Ñ—Å–æ—é–∑–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ú–ì–£',
        type: 'PRIMARY',
        industry: 'EDUCATION',
        address: '–ú–æ—Å–∫–≤–∞, –õ–µ–Ω–∏–Ω—Å–∫–∏–µ –≥–æ—Ä—ã, 1',
        phone: '+7 (495) 939-1000',
        email: 'profkom@msu.ru',
        chairmanName: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á'
      },
      {
        name: '–ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ—Ñ—Å–æ—é–∑–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ú–ì–¢–£ –∏–º. –ë–∞—É–º–∞–Ω–∞',
        type: 'PRIMARY',
        industry: 'EDUCATION',
        address: '–ú–æ—Å–∫–≤–∞, 2-—è –ë–∞—É–º–∞–Ω—Å–∫–∞—è —É–ª., 5',
        phone: '+7 (495) 263-60-00',
        email: 'profkom@bmstu.ru',
        chairmanName: '–°–º–∏—Ä–Ω–æ–≤–∞ –û–ª—å–≥–∞ –ü–µ—Ç—Ä–æ–≤–Ω–∞'
      },
      {
        name: '–ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ—Ñ—Å–æ—é–∑–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –°–ü–±–ì–£',
        type: 'PRIMARY',
        industry: 'EDUCATION',
        address: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∞—è –Ω–∞–±., 7-9',
        phone: '+7 (812) 328-20-00',
        email: 'profkom@spbu.ru',
        chairmanName: '–í–æ–ª–∫–æ–≤ –ê–ª–µ–∫—Å–µ–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á'
      },
      {
        name: '–ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ—Ñ—Å–æ—é–∑–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ì–∞–∑–ø—Ä–æ–º',
        type: 'PRIMARY',
        industry: 'ENERGY',
        address: '–ú–æ—Å–∫–≤–∞, —É–ª. –ù–∞–º–µ—Ç–∫–∏–Ω–∞, 16',
        phone: '+7 (495) 719-30-00',
        email: 'profkom@gazprom.ru',
        chairmanName: '–ù–æ–≤–∏–∫–æ–≤ –°–µ—Ä–≥–µ–π –ú–∏—Ö–∞–π–ª–æ–≤–∏—á'
      },
      {
        name: '–ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ—Ñ—Å–æ—é–∑–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –°–±–µ—Ä–±–∞–Ω–∫',
        type: 'PRIMARY',
        industry: 'FINANCE',
        address: '–ú–æ—Å–∫–≤–∞, —É–ª. –í–∞–≤–∏–ª–æ–≤–∞, 19',
        phone: '+7 (495) 500-55-50',
        email: 'profkom@sberbank.ru',
        chairmanName: '–§–µ–¥–æ—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞'
      }
    ];

    const primaryChairmen = [
      { firstName: '–ò–≤–∞–Ω', lastName: '–ò–≤–∞–Ω–æ–≤', middleName: '–ò–≤–∞–Ω–æ–≤–∏—á', email: 'chairman@msu.ru' },
      { firstName: '–û–ª—å–≥–∞', lastName: '–°–º–∏—Ä–Ω–æ–≤–∞', middleName: '–ü–µ—Ç—Ä–æ–≤–Ω–∞', email: 'chairman@bmstu.ru' },
      { firstName: '–ê–ª–µ–∫—Å–µ–π', lastName: '–í–æ–ª–∫–æ–≤', middleName: '–ù–∏–∫–æ–ª–∞–µ–≤–∏—á', email: 'chairman@spbu.ru' },
      { firstName: '–°–µ—Ä–≥–µ–π', lastName: '–ù–æ–≤–∏–∫–æ–≤', middleName: '–ú–∏—Ö–∞–π–ª–æ–≤–∏—á', email: 'chairman@gazprom.ru' },
      { firstName: '–ú–∞—Ä–∏—è', lastName: '–§–µ–¥–æ—Ä–æ–≤–∞', middleName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞', email: 'chairman@sberbank.ru' }
    ];

    for (let i = 0; i < primaryOrgs.length; i++) {
      const org = primaryOrgs[i];
      const chairman = primaryChairmen[i];

      const primaryOrg = await prisma.organization.create({
        data: {
          name: org.name,
          type: org.type,
          industry: org.industry,
          address: org.address,
          phone: org.phone,
          email: org.email,
          chairmanName: org.chairmanName,
          membersCount: 0,
          isActive: true
        }
      });

      const primaryChairman = await prisma.user.create({
        data: {
          email: chairman.email,
          password: await bcrypt.hash('123456', 10),
          firstName: chairman.firstName,
          lastName: chairman.lastName,
          middleName: chairman.middleName,
          phone: `+7 (495) ${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 90) + 10}`,
          role: 'PRIMARY_CHAIRMAN',
          organizationId: primaryOrg.id,
          isActive: true,
          emailVerified: true
        }
      });

      console.log(`‚úÖ –ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ${i + 1} —Å–æ–∑–¥–∞–Ω–∞:`, primaryOrg.name);
      console.log(`‚úÖ –ü–µ—Ä–≤–∏—á–Ω—ã–π –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å ${i + 1}:`, primaryChairman.email);

      // –°–æ–∑–¥–∞–µ–º —á–ª–µ–Ω–æ–≤ –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–µ—Ä–≤–∏—á–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      await createMembersForOrganization(primaryOrg.id, primaryOrg.name);
    }

    console.log('\nüéâ –í—Å–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

async function createMembersForOrganization(organizationId, organizationName) {
  const memberNames = [
    { firstName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', lastName: '–ü–µ—Ç—Ä–æ–≤', middleName: '–°–µ—Ä–≥–µ–µ–≤–∏—á' },
    { firstName: '–ï–ª–µ–Ω–∞', lastName: '–°–∏–¥–æ—Ä–æ–≤–∞', middleName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞' },
    { firstName: '–ú–∏—Ö–∞–∏–ª', lastName: '–ö–æ–∑–ª–æ–≤', middleName: '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á' },
    { firstName: '–ê–Ω–Ω–∞', lastName: '–ú–æ—Ä–æ–∑–æ–≤–∞', middleName: '–ò–≥–æ—Ä–µ–≤–Ω–∞' },
    { firstName: '–î–º–∏—Ç—Ä–∏–π', lastName: '–í–æ–ª–∫–æ–≤', middleName: '–ù–∏–∫–æ–ª–∞–µ–≤–∏—á' },
    { firstName: '–û–ª—å–≥–∞', lastName: '–ù–æ–≤–∏–∫–æ–≤–∞', middleName: '–ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞' },
    { firstName: '–°–µ—Ä–≥–µ–π', lastName: '–§–µ–¥–æ—Ä–æ–≤', middleName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á' },
    { firstName: '–ú–∞—Ä–∏—è', lastName: '–°–º–∏—Ä–Ω–æ–≤–∞', middleName: '–ü–µ—Ç—Ä–æ–≤–Ω–∞' }
  ];

  for (let i = 0; i < memberNames.length; i++) {
    const member = memberNames[i];
    const orgDomain = organizationName.toLowerCase()
      .replace(/[^a-z0-9]/g, '')
      .replace('–ø–µ—Ä–≤–∏—á–Ω–∞—è–ø—Ä–æ—Ñ—Å–æ—é–∑–Ω–∞—è–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '')
      .substring(0, 10);
    const email = `member${i + 1}@${orgDomain}.ru`;
    
    try {
      const user = await prisma.user.create({
        data: {
          email: email,
          password: await bcrypt.hash('123456', 10),
          firstName: member.firstName,
          lastName: member.lastName,
          middleName: member.middleName,
          phone: `+7 (495) ${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 90) + 10}`,
          role: 'PRIMARY_MEMBER',
          organizationId: organizationId,
          isActive: true,
          emailVerified: true
        }
      });

      // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
      const statuses = ['APPROVED', 'PENDING', 'REJECTED'];
      const randomStatus = statuses[Math.floor(Math.random() * statuses.length)];

      await prisma.membershipApplication.create({
        data: {
          firstName: user.firstName,
          lastName: user.lastName,
          middleName: user.middleName,
          gender: Math.random() > 0.5 ? 'MALE' : 'FEMALE',
          dateOfBirth: new Date(1980 + Math.floor(Math.random() * 30), Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),
          phone: user.phone,
          address: JSON.stringify({
            city: '–ú–æ—Å–∫–≤–∞',
            street: `—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, ${Math.floor(Math.random() * 100) + 1}`
          }),
          organizationId: organizationId,
          status: randomStatus,
          userId: user.id
        }
      });

      console.log(`  ‚úÖ –ß–ª–µ–Ω —Å–æ–∑–¥–∞–Ω: ${user.firstName} ${user.lastName} (${email}) - ${randomStatus}`);
    } catch (error) {
      console.log(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–ª–µ–Ω–∞ ${i + 1}:`, error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
async function main() {
  await clearExistingData();
  await createFakeOrganizations();
}

main()
  .then(() => {
    console.log('\nüéâ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
